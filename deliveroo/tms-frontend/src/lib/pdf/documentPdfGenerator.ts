import jsPDF from 'jspdf';
import { Document } from '../../model/documents';
import { formatDate } from '../date/dateUtils';

const DELIVEROO_LOGO_URL = 'https://raw.githubusercontent.com/developer-jutra/dj-webinars/refs/heads/main/deliveroo/assets/logo/deliveroo-transparent-dark-foreground.png';

interface PDFOptions {
  includeWatermark?: boolean;
  includeFooter?: boolean;
}

export class PDFGenerator {
  private doc: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number = 20;
  private currentY: number = 20;

  constructor() {
    this.doc = new jsPDF();
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
  }

  private async loadImage(url: string): Promise<string> {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.crossOrigin = 'anonymous';
      img.onload = () => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = img.width;
        canvas.height = img.height;
        ctx?.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/png'));
      };
      img.onerror = () => {
        // Fallback: create a simple text logo if image fails to load
        resolve('');
      };
      img.src = url;
    });
  }

  private async addHeader(): Promise<void> {
    try {
      const logoDataUrl = await this.loadImage(DELIVEROO_LOGO_URL);
      
      if (logoDataUrl) {
        // Add logo (scaled down appropriately)
        this.doc.addImage(logoDataUrl, 'PNG', this.margin, 10, 40, 15);
      } else {
        // Fallback text logo
        this.doc.setFontSize(16);
        this.doc.setFont('helvetica', 'bold');
        this.doc.text('Deliveroo TMS', this.margin, 20);
      }
    } catch (error) {
      // Fallback text logo
      this.doc.setFontSize(16);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text('Deliveroo TMS', this.margin, 20);
    }

    // Company info
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text('Transport Management System', this.pageWidth - this.margin - 60, 15);
    this.doc.text('Deliveroo TMS Sp. z o.o.', this.pageWidth - this.margin - 60, 22);
    
    // Header line
    this.doc.setLineWidth(0.5);
    this.doc.line(this.margin, 30, this.pageWidth - this.margin, 30);
    
    this.currentY = 40;
  }

  private addFooter(): void {
    const footerY = this.pageHeight - 20;
    
    // Footer line
    this.doc.setLineWidth(0.5);
    this.doc.line(this.margin, footerY - 5, this.pageWidth - this.margin, footerY - 5);
    
    // Footer text
    this.doc.setFontSize(8);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text('Generated by Deliveroo TMS', this.margin, footerY);
    this.doc.text(`Generated on: ${formatDate(new Date())}`, this.pageWidth - this.margin - 50, footerY);
    
    // Page number
    const pageNum = this.doc.getCurrentPageInfo().pageNumber;
    this.doc.text(`Page ${pageNum}`, this.pageWidth / 2 - 10, footerY);
  }

  private addTitle(title: string): void {
    this.doc.setFontSize(18);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin, this.currentY);
    this.currentY += 15;
  }

  private addSection(title: string, content: { label: string; value: string }[]): void {
    // Section title
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin, this.currentY);
    this.currentY += 8;

    // Section content
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    
    content.forEach(item => {
      if (this.currentY > this.pageHeight - 40) {
        this.doc.addPage();
        this.currentY = 20;
      }
      
      this.doc.setFont('helvetica', 'bold');
      this.doc.text(`${item.label}:`, this.margin, this.currentY);
      this.doc.setFont('helvetica', 'normal');
      this.doc.text(item.value, this.margin + 40, this.currentY);
      this.currentY += 6;
    });
    
    this.currentY += 5;
  }

  private addWatermark(): void {
    this.doc.setFontSize(50);
    this.doc.setTextColor(200, 200, 200);
    this.doc.setFont('helvetica', 'bold');
    
    // Rotate and add watermark
    this.doc.text('SAMPLE DOCUMENT', this.pageWidth / 2, this.pageHeight / 2, {
      angle: 45,
      align: 'center'
    });
    
    // Reset color
    this.doc.setTextColor(0, 0, 0);
  }

  private getDocumentTypeLabel(type: Document['type']): string {
    const labels = {
      'contract': 'Contract',
      'invoice': 'Invoice',
      'registration': 'Vehicle Registration',
      'insurance': 'Insurance Policy',
      'inspection': 'Technical Inspection Certificate',
      'tir-carnet': 'TIR Carnet',
      'adr': 'ADR Certificate',
      'hazmat-permit': 'Hazmat Transport Permit',
      'license': 'License',
      'certificate': 'Certificate',
      'other': 'Document'
    };
    return labels[type];
  }

  private getEntityTypeLabel(type: Document['entityType']): string {
    const labels = {
      'vehicle': 'Vehicle',
      'customer': 'Customer',
      'supplier': 'Supplier',
      'driver': 'Driver',
      'company': 'Company',
      'other': 'Other'
    };
    return labels[type];
  }

  public async generateDocument(document: Document, options: PDFOptions = {}): Promise<void> {
    // Add header with logo
    await this.addHeader();
    
    // Add watermark if requested
    if (options.includeWatermark) {
      this.addWatermark();
    }
    
    // Document title
    this.addTitle(this.getDocumentTypeLabel(document.type));
    
    // Document information section
    const documentInfo = [
      { label: 'Document Name', value: document.name },
      { label: 'Document Type', value: this.getDocumentTypeLabel(document.type) },
      { label: 'Document ID', value: document.id }
    ];
    
    if (document.number) {
      documentInfo.push({ label: 'Document Number', value: document.number });
    }
    
    this.addSection('Document Information', documentInfo);
    
    // Entity information section
    const entityInfo = [
      { label: 'Related To', value: this.getEntityTypeLabel(document.entityType) },
      { label: 'Entity Name', value: document.entityName },
      { label: 'Entity ID', value: document.entityId }
    ];
    
    this.addSection('Related Entity', entityInfo);
    
    // Dates section
    const dateInfo = [
      { label: 'Issue Date', value: formatDate(document.issueDate) }
    ];
    
    if (document.expiryDate) {
      dateInfo.push({ label: 'Expiry Date', value: formatDate(document.expiryDate) });
    }
    
    dateInfo.push(
      { label: 'Created', value: formatDate(document.createdAt) },
      { label: 'Last Updated', value: formatDate(document.updatedAt) }
    );
    
    this.addSection('Important Dates', dateInfo);
    
    // Authority section
    if (document.issuingAuthority) {
      this.addSection('Issuing Authority', [
        { label: 'Authority', value: document.issuingAuthority }
      ]);
    }
    
    // Notes section
    if (document.notes) {
      this.currentY += 5;
      this.doc.setFontSize(12);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text('Notes', this.margin, this.currentY);
      this.currentY += 8;
      
      this.doc.setFontSize(10);
      this.doc.setFont('helvetica', 'normal');
      
      // Split notes into lines to handle long text
      const lines = this.doc.splitTextToSize(document.notes, this.pageWidth - 2 * this.margin);
      lines.forEach((line: string) => {
        if (this.currentY > this.pageHeight - 40) {
          this.doc.addPage();
          this.currentY = 20;
        }
        this.doc.text(line, this.margin, this.currentY);
        this.currentY += 5;
      });
    }
    
    // Document content placeholder
    this.currentY += 10;
    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Document Content', this.margin, this.currentY);
    this.currentY += 8;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text('This is a sample document generated by the Deliveroo TMS system.', this.margin, this.currentY);
    this.currentY += 6;
    this.doc.text('This document contains all the relevant information as stored in the system.', this.margin, this.currentY);
    
    // Add footer if requested
    if (options.includeFooter !== false) {
      this.addFooter();
    }
  }

  public save(filename: string): void {
    this.doc.save(filename);
  }

  public output(type: 'blob' | 'datauristring' | 'datauri' = 'blob'): any {
    return this.doc.output(type);
  }
}

// Utility function to generate and download a document PDF
export const generateDocumentPDF = async (document: Document, options: PDFOptions = {}): Promise<void> => {
  const generator = new PDFGenerator();
  await generator.generateDocument(document, {
    includeWatermark: true,
    includeFooter: true,
    ...options
  });
  
  const filename = `${document.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${document.id}.pdf`;
  generator.save(filename);
};

// Utility function to generate PDF blob for preview
export const generateDocumentPDFBlob = async (document: Document, options: PDFOptions = {}): Promise<Blob> => {
  const generator = new PDFGenerator();
  await generator.generateDocument(document, {
    includeWatermark: true,
    includeFooter: true,
    ...options
  });
  
  return generator.output('blob');
};